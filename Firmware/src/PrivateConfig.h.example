#include <ESP8266WiFi.h>

class PrivateConfig
{
    public:
        inline static const String   WIFI_SSID = "Enter wireless SSID here";
        inline static const String   WIFI_PASS = "Enter wireless password here";

        inline static const String   MQTT_SERVER = "Enter mqtt server address here"; // mqtt server address without port number
        inline static const String   MQTT_USER   = "Enter mqtt username here";       // mqtt user. Use "" for no username
        inline static const String   MQTT_PASS   = "Enter mqtt password here";       // mqtt password. Use "" for no password
        inline static const uint16_t MQTT_PORT   = 1883;                             // mqtt port (Default 1883)
        
        static constexpr uint8_t MODBUS_DEVICES[] = {0x02, 0x03, 0x03 ...};             // See README.md for details
        static constexpr uint8_t NUMBER_OF_CHANNELS_MONITORED_PER_DEVICE[] = {11, 4};   // See README.md for details
        
        static constexpr uint8_t  ELEMENT_OFFSET_ON_ROOMS_FOR_DEVICE[] = {0,11,15}; // See README.md for details

        static constexpr float    MIN_TEMP    = 6.0;                              // minimum temperature to set
        static constexpr float    MAX_TEMP    = 40.0;                             // maximum temperature to set
        static constexpr float    TEMP_STEP   = 0.5;                              // the temperature step size, either 0.5 or 1.0

        // Be sure that then number of elements in rooms matches the total amount of channels read for all devices!!!
        inline static char * ROOMS[] = {
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 0 <<== ELEMENT_OFFSET_ON_ROOMS_FOR_DEVICE[0] = 0
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 1
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 2
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 3
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 4
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 5
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 6
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 7
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 8
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 9
           (char*) "Enter room name here",      // Name for the room at device 0 chanel 10 
           (char*) "Enter room name here",      // Name for the room at device 1 chanel 0 <<== ELEMENT_OFFSET_ON_ROOMS_FOR_DEVICE[1] = 11
           (char*) "Enter room name here ,      // Name for the room at device 1 chanel 1
           (char*) "Enter room name here",      // Name for the room at device 1 chanel 2
           (char*) "Enter room name here"       // Name for the room at device 1 chanel 3
        };                                      // Name for the room at device 2 chanel 0      <<== ELEMENT_OFFSET_ON_ROOMS_FOR_DEVICE[2] = 15
        static constexpr uint8_t  ELEMENT_OFFSET_ON_ROOMS_FOR_DEVICE[] = {0,11,15}; // See README.md for details. Used to: Define number of elements in arrays
    
        static const uint8_t  NUMBER_OF_OPERATIONMODES = 4;     // Set number of operations modes. E.g.: 0 = Normal, 1 = Holiday, 2 = Surplus heat, 3 = Maintenance
        static const uint8_t  OPERATIONMODE_MAINTENANCE = 3;    // Defindes which mode is maintenance mode. This operation mode set setpoint for all thermostats to MAX_TEMP
        static const uint8_t  OPERATIONTIME_MAINTENANCE = 5*60; // Defindes how many seconds maintenance mode will be active, before returning to previous operation mode.


        inline static char * NAME_OF_OPERATIONMODES[] = {
                (char*) "Normal operation", 
                (char*) "Holiday operation",
                (char*) "Surplus heat operation",
                (char*) "Maintenance operation"
        };
